# ****************************************************************************************#
# Encoding:         UTF-8
# ----------------------------------------------------------------------------------------
# File Name:        Retinex.py
# Descriptions:     Retinex算法
# -----------------------------------------README-----------------------------------------
# 可以对RGB彩图做处理：先转换到HSV空间，对V通道做处理，然后再还原回RGB。
#
# ----------------------------------------------------------------------------------------
# ****************************************************************************************#


import cv2
import numpy as np
from time import time

GAMMA = np.ndarray(256)
GAMMA[:] = [0, 12, 17, 22, 25, 29, 32, 35, 37, 40, 42, 45, 47, 49, 51, 53,
            55, 57, 59, 61, 62, 64, 66, 67, 69, 71, 72, 74, 75, 77, 78, 80,
            81, 82, 84, 85, 86, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100,
            101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115,
            116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
            129, 130, 131, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140,
            141, 142, 142, 143, 144, 145, 146, 147, 148, 149, 149, 150, 151,
            152, 153, 154, 154, 155, 156, 157, 158, 158, 159, 160, 161, 162,
            162, 163, 164, 165, 166, 166, 167, 168, 169, 169, 170, 171, 172,
            173, 173, 174, 175, 176, 176, 177, 178, 178, 179, 180, 181, 181,
            182, 183, 184, 184, 185, 186, 186, 187, 188, 189, 189, 190, 191,
            191, 192, 193, 193, 194, 195, 195, 196, 197, 198, 198, 199, 200,
            200, 201, 202, 202, 203, 204, 204, 205, 206, 206, 207, 207, 208,
            209, 209, 210, 211, 211, 212, 213, 213, 214, 215, 215, 216, 216,
            217, 218, 218, 219, 220, 220, 221, 221, 222, 223, 223, 224, 224,
            225, 226, 226, 227, 227, 228, 229, 229, 230, 230, 231, 232, 232,
            233, 233, 234, 235, 235, 236, 236, 237, 238, 238, 239, 239, 240,
            240, 241, 242, 242, 243, 243, 244, 244, 245, 246, 246, 247, 247,
            248, 248, 249, 250, 250, 251, 251, 252, 252, 253, 253, 254, 255]


def Retinex(src: np.ndarray) -> np.ndarray:
    dst = np.ndarray(src.shape)
    L = src.max(2)
    L_ = GAMMA[L]
    L_ = L_.astype(np.uint8)
    R = cv2.GaussianBlur(L_, (3, 3), 5) + 0.00000001
    for i in range(3):
        tmp = src[:, :, i]/R
        dst[:, :, i] = tmp
    dst[dst > 1] = 1
    dst = (dst*255).astype(np.uint8)
    return dst


if __name__ == "__main__":
    path = "./img/day-0.png"
    src = cv2.imread(path)[4:1084, 8:1928]
    
    start = time()
    dst = Retinex(src)
    print(f"Running time = {time()-start}s")

    cv2.imshow("src", cv2.resize(src, (960, 540)))
    cv2.imshow("dst", cv2.resize(dst, (960, 540)))
    cv2.waitKey()
    cv2.destroyAllWindows()
